@Test
    public void shouldThrowExceptionWhenUserIsNotLoggedIn() {
        loggedInUser = null;
        assertThrows(UserNotLoggedInException.class, () -> {
            new TestableTripService().getTripsByUser(null);
        });
    }

     @Test
        void shouldReturnEmptryTripsListWhenUserIsLoggedInButIsNotFriends() {
            User laExDeEdu = new User();
            loggedInUser = new User(); //representa a Edu
            List<Trip> tripsDeLaExDeEdu = new TestableTripService().getTripsByUser(laExDeEdu);

            assertThat(tripsDeLaExDeEdu.size(), is(0));
        }

     @Test
         void shouldReturnTripsWhenUserAndLoggedInUserAreFriends() {
             loggedInUser = new User(); //representa a Edu
             Trip tripToSanFran = new Trip();
             Trip tripToThailand = new Trip();
             trips = List.of(tripToSanFran, tripToThailand);
             User javi = anUser()
                     .withFriends(List.of(loggedInUser))
                     .build();

             List<Trip> tripsDeJavi = new TestableTripService().getTripsByUser(javi);

             assertThat(tripsDeJavi.size(), is(2));
             assertThat(tripsDeJavi.get(0), is(tripToSanFran));
             assertThat(tripsDeJavi.get(1), is(tripToThailand));
         }